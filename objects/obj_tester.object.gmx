<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tests = ds_list_create();
test_add(test_blank);
setup_tests_here();
room_height = ds_list_size(tests) * 32 + 80;
window_set_size(room_width, room_height);
surface_resize(application_surface, room_width, room_height);
swaps = ds_list_create();
ds_list_copy(swaps, tests);
ntime = 0;
ndone = 0;
if (os_browser == browser_not_a_browser) {
    switch (os_type) {
        case os_windows: platform = "Windows"; break;
        case os_macosx: platform = "Mac OSX"; break;
        case os_linux: platform = "Linux"; break;
        case os_android: platform = "Android"; break;
        case os_ios: platform = "iOS"; break;
        default: platform = "???"; break;
    }
    if (code_is_compiled()) {
        platform += " YYC";
    } else platform += " VM";
} else platform = "HTML5";
platform += " " + GM_runtime_version;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>test_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_test);
var c = $806050;
draw_set_color(c);
var qx = 100;
var qy = 4;
var qw = 400;
var qh = 20; // bar width
var qs = 32; // spacing
var n = ds_list_size(tests);
if (n &lt;= 1) exit;

// test #0 is blank and used as reference point so that we don't
// count up time that it takes to just do a script call alone
var q, qt, qr, rt, i;
q = tests[|0];
rt = q[test_t.avg];
if (include_call_time) rt = 0;

// draw header:
draw_set_halign(fa_right);
draw_text(qx - 4, qy, "Avg (Î¼s)");
draw_set_halign(fa_center);
draw_text(qx + qw div 2, qy, "Relative performance");
draw_set_halign(fa_left);
draw_text(qx + qw + 4, qy, "Name");
qy += 24;

// compute minimum/maximum times:
q = tests[|1];
qt = q[test_t.avg] - rt;
var tmin = qt, tmax = qt;
for (i = 2; i &lt; n; i++) {
    q = tests[|i];
    qt = q[test_t.avg] - rt;
    tmin = min(tmin, qt);
    tmax = max(tmax, qt);
}
tmin = max(tmin, 0);

// draw rows:
for (i = 1; i &lt; n; i++) {
    q = tests[|i];
    qt = q[test_t.avg] - rt;
    draw_set_halign(fa_right);
    draw_text(qx - 4, qy, string_format(qt, 0, 3));
    draw_set_halign(fa_left);
    //
    if (i &gt; 0) {
        qr = max(0, tmin / qt);
    } else qr = 1;
    draw_sprite_ext(spr_white32, 0, qx, qy, qw / 32, qh / 32, 0, c, 0.1);
    draw_sprite_ext(spr_white32, 0, qx, qy, qr * qw / 32, qh / 32, 0, c, 1);
    //
    draw_text(qx + 5, qy + 1, string_format(qr * 100, 0, 1) + "%");
    draw_set_color(c_white);
    draw_text(qx + 4, qy, string_format(qr * 100, 0, 1) + "%");
    draw_set_color(c);
    //
    draw_set_valign(fa_middle);
    draw_text(qx + qw + 4, qy + qh div 2, q[test_t.name]);
    draw_set_valign(fa_top);
    qy += qs;
}

// draw footer:
draw_set_halign(fa_right);
draw_text(qx - 4, qy, string_format_exp(ndone)
    + "#" + string_format_exp(ndone * tests_per_frame * calls_per_test));
draw_set_halign(fa_left);
draw_text(qx, qy, "Tests#Iterations#" + platform);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
